## To start tracking/monitoring the repository
git init

## To add initial/new code/file in the staging area
git add .

## To unstage the changes
git restore --staged .

## To restore the unchanged code 
git restore filename

## To check the staging area
git status

## To check the git commits in oneline & limited numbers.
git log --oneline -n "given numbers"


## Commit the code
git commit -m "Commit msg"
git commit -am "Commit msg" : Commiting without staging

## To push the final commit on repository
git push repository-name

## To hard reset : It completely discards the changes in commit,staging & file. 
git reset --hard commitID: The ID should be always the older & not the latest.

## To soft reset : It discard changes only in commit.
git reset --soft commitID

## To mixed reset : It discard changes in both commit & staged area only.
git reset --mixed commitID

## Branching in git 
git branch
git switch branchname
git switch -c branchname : To create and switch to the newly created branch all in one. 
git branch -D branchname : To Delete the branch
git branch -M branchname : To change the name of the branch. 

## To check difference in a file or staged area 
git diff filename
git diff --staged filename

## To cherry pick commits in a different/wrong branch to the choice branch.
git cherry-pick commitID

## stashing
Stashing is used if we write a code in a particular branch & we need to switch branch without commiting.
In that circumstances we do stash where we save the code temporarily
We import the stashed code in any branch of our choice

git stash
git stash list
git stash pop
git stash apply
git stash drop stash@{}
apply + drop = pop

## To change/amend the commit id or msg
git commit --amend --no-edit : Only changed the ID
git commit --amend -m "msg" : Changes both ID & msgs

## To track the branch/repository
git branch -r 

## To merge the changes/commits of sub branches into main branch
git merge branchname
commit
